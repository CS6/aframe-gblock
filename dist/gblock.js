// https://github.com/archilogic-com/aframe-gblock
(function () {
	'use strict';

	var fsBase64 = "data:text/plain;base64,";

	var vsBase64 = "data:text/plain;base64,dW5pZm9ybSBtYXQ0IHVfbW9kZWxWaWV3TWF0cml4Ow0KdW5pZm9ybSBtYXQ0IHVfcHJvamVjdGlvbk1hdHJpeDsNCnVuaWZvcm0gbWF0MyB1X25vcm1hbE1hdHJpeDsNCg0KYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjsNCmF0dHJpYnV0ZSB2ZWMzIGFfbm9ybWFsOw0KDQp2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7DQp2YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbjsNCnZhcnlpbmcgdmVjMyB2X2Jpbm9ybWFsOw0KdmFyeWluZyB2ZWMzIHZfdGFuZ2VudDsNCg0Kdm9pZCBtYWluKCkgew0KICB2ZWMzIG9ialBvc2l0aW9uID0gYV9wb3NpdGlvbjsNCiAgdmVjNCB3b3JsZFBvc2l0aW9uID0gdmVjNChvYmpQb3NpdGlvbiwgMS4wKTsNCg0KICAvLyBPdXIgb2JqZWN0IHNwYWNlIGhhcyBubyByb3RhdGlvbiBhbmQgbm8gc2NhbGUsIHNvIHRoaXMgaXMgZmluZS4NCiAgdl9ub3JtYWwgPSBhX25vcm1hbDsNCiAgdl9wb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6Ow0KICAvLyBMb29raW5nIGZvciBhbiBhcmJpdHJhcnkgdmVjdG9yIHRoYXQgaXNuJ3QgcGFyYWxsZWwgdG8gdGhlIG5vcm1hbC4gIEF2b2lkaW5nIGF4aXMgZGlyZWN0aW9ucyBzaG91bGQgaW1wcm92ZSBvdXIgY2hhbmNlcy4NCiAgdmVjMyBhcmJpdHJhcnlWZWN0b3IgPSBub3JtYWxpemUodmVjMygwLjQyLCAtMC4yMSwgMC4xNSkpOw0KICB2ZWMzIGFsdGVybmF0ZUFyYml0cmFyeVZlY3RvciA9IG5vcm1hbGl6ZSh2ZWMzKDAuNDMsIDEuNSwgMC4xNSkpOw0KICAvLyBJZiBhcmJpdHJhcnkgdmVjdG9yIGlzIHBhcmFsbGVsIHRvIHRoZSBub3JtYWwsIGNob29zZSBhIGRpZmZlcmVudCBvbmUuDQogIHZfdGFuZ2VudCA9IG5vcm1hbGl6ZShhYnMoZG90KHZfbm9ybWFsLCBhcmJpdHJhcnlWZWN0b3IpKSA8IDEuMCA/IGNyb3NzKHZfbm9ybWFsLCBhcmJpdHJhcnlWZWN0b3IpIDogY3Jvc3Modl9ub3JtYWwsIGFsdGVybmF0ZUFyYml0cmFyeVZlY3RvcikpOw0KICB2X2Jpbm9ybWFsID0gbm9ybWFsaXplKGNyb3NzKHZfbm9ybWFsLCB2X3RhbmdlbnQpKTsNCg0KICBnbF9Qb3NpdGlvbiA9IHVfcHJvamVjdGlvbk1hdHJpeCAqIHVfbW9kZWxWaWV3TWF0cml4ICogdmVjNChvYmpQb3NpdGlvbiwgMS4wKTsNCn0NCg==";

	function GBlockLoader () {

	  THREE.GLTFLoader.call(this);

	  var self = this;

	  this._parse = this.parse;
	  this.parse = function (data, path, onLoad, onError) {
	    // convert uint8 to json
	    var json = JSON.parse(convertUint8ArrayToString(data));
	    // use base64 shaders
	    Object.keys(json.shaders).forEach(function (key, i) {
	      if (key.indexOf('fragment') > -1) json.shaders[key].uri = fsBase64;
	      else if (key.indexOf('vertex') > -1) json.shaders[key].uri = vsBase64;
	    });
	    // convert json to uint8
	    var uint8array = new TextEncoder('utf-8').encode(JSON.stringify(json));
	    // parse data
	    self._parse.call(self, uint8array, path, onLoad, onError);
	  };

	}
	GBlockLoader.prototype = THREE.GLTFLoader.prototype;

	// aframe module

	// check if gblock component has already been registered
	if (AFRAME.components.gblock) {
	  if (window.io3d) {
	    throw 'Error: gBlock component is already included in the 3dio.js library. Please remove this "<script>" tag.'
	  } else {
	    throw 'Error: gBlock component has been already registered in another script. Please remove this "<script>" tag.'
	  }
	}

	AFRAME.registerComponent('gblock', {
	  schema: {type: 'asset'},

	  init: function () {
	    this.model = null;
	    this.loader = new GBlockLoader();
	  },

	  update: function () {
	    var self = this;
	    var el = this.el;
	    var src = this.data;

	    if (!src) { return; }

	    this.remove();

	    // FIXME: Replace this with an official API URL once available
	    // This API call is only needed to obtain the official glTF URL of a google block model.
	    // The glTF itself is not being proxied and gets fetched from https://vr.google.com/downloads/* directly.
	    // https://github.com/archilogic-com/aframe-gblock/issues/1
	    // API server code: server/index.js
	    fetch('https://us-central1-gblock-api.cloudfunctions.net/get-gltf-url/?url=' + src).then(function (response) {

	      return response.json().then(function (message) {
	        if (!response.ok) throw new Error('ERROR: ' + response.status + ' "' + message.message + '"')

	        // load glTF model from original URL
	        var gltfUrl = message.gltfUrl;

	        self.loader.load( gltfUrl, function gltfLoaded (gltfModel) {
	          self.model = gltfModel.scene || gltfModel.scenes[0];
	          // FIXME: adapt projection matrix in original shaders
	          self.model.traverse(function (child) {
	            if (child.material) child.material = new THREE.MeshPhongMaterial({ vertexColors: THREE.VertexColors });
	          });
	          self.model.animations = gltfModel.animations;
	          el.setObject3D('mesh', self.model);
	          el.emit('model-loaded', {format: 'gltf', model: self.model});
	        });

	      })
	    });

	  },

	  remove: function () {
	    if (!this.model) { return; }
	    this.el.removeObject3D('mesh');
	  }
	});

	// helpers

	// from https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js
	function convertUint8ArrayToString (array) {
	  if (window.TextDecoder !== undefined) {
	    return new TextDecoder().decode(array);
	  }
	  // Avoid the String.fromCharCode.apply(null, array) shortcut, which
	  // throws a "maximum call stack size exceeded" error for large arrays.
	  var s = '';
	  for (var i = 0, il = array.length; i < il; i++) {
	    s += String.fromCharCode(array[i]);
	  }
	  return s;
	}

}());
//# sourceMappingURL=gblock.js.map
