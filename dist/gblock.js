// https://github.com/archilogic-com/aframe-gblock
(function () {
	'use strict';

	var fsBase64 = "data:text/plain;base64,";

	var vsBase64 = "data:text/plain;base64,dW5pZm9ybSBtYXQ0IHVfbW9kZWxWaWV3TWF0cml4Owp1bmlmb3JtIG1hdDQgdV9wcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDMgdV9ub3JtYWxNYXRyaXg7CmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247CmF0dHJpYnV0ZSB2ZWMzIGFfbm9ybWFsOwp2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7CnZhcnlpbmcgdmVjMyB2X3Bvc2l0aW9uOwp2YXJ5aW5nIHZlYzMgdl9iaW5vcm1hbDsKdmFyeWluZyB2ZWMzIHZfdGFuZ2VudDsKdm9pZCBtYWluKCkgewogIHZlYzMgb2JqUG9zaXRpb24gPSBhX3Bvc2l0aW9uOwogIHZlYzQgd29ybGRQb3NpdGlvbiA9IHZlYzQob2JqUG9zaXRpb24sIDEuMCk7CiAgdl9ub3JtYWwgPSBhX25vcm1hbDsKICB2X3Bvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7CiAgdmVjMyBhcmJpdHJhcnlWZWN0b3IgPSBub3JtYWxpemUodmVjMygwLjQyLCAtMC4yMSwgMC4xNSkpOwogIHZlYzMgYWx0ZXJuYXRlQXJiaXRyYXJ5VmVjdG9yID0gbm9ybWFsaXplKHZlYzMoMC40MywgMS41LCAwLjE1KSk7CiAgdl90YW5nZW50ID0gbm9ybWFsaXplKGFicyhkb3Qodl9ub3JtYWwsIGFyYml0cmFyeVZlY3RvcikpIDwgMS4wID8gY3Jvc3Modl9ub3JtYWwsIGFyYml0cmFyeVZlY3RvcikgOiBjcm9zcyh2X25vcm1hbCwgYWx0ZXJuYXRlQXJiaXRyYXJ5VmVjdG9yKSk7CiAgdl9iaW5vcm1hbCA9IG5vcm1hbGl6ZShjcm9zcyh2X25vcm1hbCwgdl90YW5nZW50KSk7CiAgZ2xfUG9zaXRpb24gPSB1X3Byb2plY3Rpb25NYXRyaXggKiB1X21vZGVsVmlld01hdHJpeCAqIHZlYzQob2JqUG9zaXRpb24sIDEuMCk7Cn0K";

	function GBlockLoader () {

	  THREE.GLTFLoader.call(this);

	  var self = this;

	  this._parse = this.parse;
	  this.parse = function (data, path, onLoad, onError) {
	    // convert uint8 to json
	    var json = JSON.parse(convertUint8ArrayToString(data));
	    // use base64 shaders
	    Object.keys(json.shaders).forEach(function (key, i) {
	      if (key.indexOf('fragment') > -1) json.shaders[key].uri = fsBase64;
	      else if (key.indexOf('vertex') > -1) json.shaders[key].uri = vsBase64;
	    });
	    // convert json to uint8
	    var uint8array = new TextEncoder('utf-8').encode(JSON.stringify(json));
	    // parse data
	    self._parse.call(self, uint8array, path, onLoad, onError);
	  };

	}
	GBlockLoader.prototype = THREE.GLTFLoader.prototype;

	// aframe module

	AFRAME.registerComponent('gblock', {
	  schema: {type: 'asset'},

	  init: function () {
	    this.model = null;
	    this.loader = new GBlockLoader();
	  },

	  update: function () {
	    var self = this;
	    var el = this.el;
	    var src = this.data;

	    if (!src) { return; }

	    this.remove();

	    var id = src.split('/').pop();

	    // FIXME: Replace this with an official API URL once available
	    // This API call is only needed to obtain the official glTF URL of a google block model.
	    // The glTF itself is not being proxied and gets fetched from https://vr.google.com/downloads/* directly.
	    // https://github.com/archilogic-com/aframe-gblock/issues/1
	    // API server code: server/index.js
	    fetch('https://gblock.herokuapp.com/get-gltf-url/' + id).then(function (response) {

	      return response.text().then(function (text) {
	        if (!response.ok) throw new Error('ERROR: ' + response.status + ' "' + text + '"')

	        // load glTF model from original URL
	        var gltfUrl = text;

	        self.loader.load( gltfUrl, function gltfLoaded (gltfModel) {
	          self.model = gltfModel.scene || gltfModel.scenes[0];
	          // FIXME: adapt projection matrix in original shaders
	          self.model.traverse(function (child) {
	            if (child.material) child.material = new THREE.MeshPhongMaterial({ vertexColors: THREE.VertexColors });
	          });
	          self.model.animations = gltfModel.animations;
	          el.setObject3D('mesh', self.model);
	          el.emit('model-loaded', {format: 'gltf', model: self.model});
	        });

	      })
	    });

	  },

	  remove: function () {
	    if (!this.model) { return; }
	    this.el.removeObject3D('mesh');
	  }
	});

	// helpers

	// from https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js
	function convertUint8ArrayToString (array) {
	  if (window.TextDecoder !== undefined) {
	    return new TextDecoder().decode(array);
	  }
	  // Avoid the String.fromCharCode.apply(null, array) shortcut, which
	  // throws a "maximum call stack size exceeded" error for large arrays.
	  var s = '';
	  for (var i = 0, il = array.length; i < il; i++) {
	    s += String.fromCharCode(array[i]);
	  }
	  return s;
	}

}());
//# sourceMappingURL=gblock.js.map
